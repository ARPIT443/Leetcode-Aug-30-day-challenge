class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> queue = new LinkedList<int[]>();
        
        //add all the rotten orange coord to queue
        //also, set rotten orange coord to 0 so we won't visit it again
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 2) {
                    queue.add(new int[]{i, j});
                    grid[i][j] = 0;
                }
            }
        }
        
        int stepCount = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                int[] currCoord = queue.remove();
                int currRow = currCoord[0];
                int currCol = currCoord[1];
                if (currRow+1 < grid.length && grid[currRow+1][currCol] == 1) {
                    grid[currRow+1][currCol] = 0;  //set to 0 so we won't visit it again
                    queue.add(new int[]{currRow+1, currCol});
                }
                if (currRow-1 >= 0 && grid[currRow-1][currCol] == 1) {
                    grid[currRow-1][currCol] = 0;
                    queue.add(new int[]{currRow-1, currCol});
                }
                if (currCol+1 < grid[currRow].length && grid[currRow][currCol+1] == 1) {
                    grid[currRow][currCol+1] = 0;
                    queue.add(new int[]{currRow, currCol+1});
                }
                if (currCol-1 >= 0 && grid[currRow][currCol-1] == 1) {
                    grid[currRow][currCol-1] = 0;
                    queue.add(new int[]{currRow, currCol-1});
                }
                size--;
            }
            stepCount++;
        }
        
        //do we still have any fresh oranges in the grid
        for (int m = 0; m < grid.length; m++) {
            for (int n = 0; n < grid[m].length; n++) {
                if (grid[m][n] == 1) {
                    return -1;
                }
            }
        }
        
        //-1 because first iteration is all rotten oranges from the initial state
        return Math.max(0, stepCount-1);
    }
}
